// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: customer/customer.proto

package customer

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Customer struct {
	Id                        string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	MerchantId                string   `protobuf:"bytes,2,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	StoreId                   string   `protobuf:"bytes,3,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
	ExternalId                string   `protobuf:"bytes,4,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	Type                      string   `protobuf:"bytes,10,opt,name=type,proto3" json:"type,omitempty"`
	Status                    string   `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	Code                      string   `protobuf:"bytes,12,opt,name=code,proto3" json:"code,omitempty"`
	Prefix                    string   `protobuf:"bytes,13,opt,name=prefix,proto3" json:"prefix,omitempty"`
	FirstName                 string   `protobuf:"bytes,14,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	MiddleName                string   `protobuf:"bytes,15,opt,name=middle_name,json=middleName,proto3" json:"middle_name,omitempty"`
	LastName                  string   `protobuf:"bytes,16,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Suffix                    string   `protobuf:"bytes,17,opt,name=suffix,proto3" json:"suffix,omitempty"`
	TaxNumber                 string   `protobuf:"bytes,18,opt,name=tax_number,json=taxNumber,proto3" json:"tax_number,omitempty"`
	Gender                    string   `protobuf:"bytes,19,opt,name=gender,proto3" json:"gender,omitempty"`
	Dob                       string   `protobuf:"bytes,20,opt,name=dob,proto3" json:"dob,omitempty"`
	Phone                     string   `protobuf:"bytes,21,opt,name=phone,proto3" json:"phone,omitempty"`
	Email                     string   `protobuf:"bytes,22,opt,name=email,proto3" json:"email,omitempty"`
	Note                      string   `protobuf:"bytes,23,opt,name=note,proto3" json:"note,omitempty"`
	Tags                      string   `protobuf:"bytes,24,opt,name=tags,proto3" json:"tags,omitempty"`
	Source                    string   `protobuf:"bytes,25,opt,name=source,proto3" json:"source,omitempty"`
	LastUpdatedSource         string   `protobuf:"bytes,26,opt,name=last_updated_source,json=lastUpdatedSource,proto3" json:"last_updated_source,omitempty"`
	StoreCredit               string   `protobuf:"bytes,30,opt,name=store_credit,json=storeCredit,proto3" json:"store_credit,omitempty"`
	IsActive                  bool     `protobuf:"varint,31,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	GroupId                   string   `protobuf:"bytes,32,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	CompanyId                 string   `protobuf:"bytes,33,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	CompanyName               string   `protobuf:"bytes,34,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`
	DefaultBillingId          string   `protobuf:"bytes,35,opt,name=default_billing_id,json=defaultBillingId,proto3" json:"default_billing_id,omitempty"`
	DefaultBillingExternalId  string   `protobuf:"bytes,36,opt,name=default_billing_external_id,json=defaultBillingExternalId,proto3" json:"default_billing_external_id,omitempty"`
	DefaultShippingId         string   `protobuf:"bytes,37,opt,name=default_shipping_id,json=defaultShippingId,proto3" json:"default_shipping_id,omitempty"`
	DefaultShippingExternalId string   `protobuf:"bytes,38,opt,name=default_shipping_external_id,json=defaultShippingExternalId,proto3" json:"default_shipping_external_id,omitempty"`
	IsSubscribed              bool     `protobuf:"varint,39,opt,name=is_subscribed,json=isSubscribed,proto3" json:"is_subscribed,omitempty"`
	CreatedAt                 string   `protobuf:"bytes,60,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt                 string   `protobuf:"bytes,61,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *Customer) Reset()         { *m = Customer{} }
func (m *Customer) String() string { return proto.CompactTextString(m) }
func (*Customer) ProtoMessage()    {}
func (*Customer) Descriptor() ([]byte, []int) {
	return fileDescriptor_f52c63852255b1ea, []int{0}
}
func (m *Customer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Customer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Customer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Customer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Customer.Merge(m, src)
}
func (m *Customer) XXX_Size() int {
	return m.Size()
}
func (m *Customer) XXX_DiscardUnknown() {
	xxx_messageInfo_Customer.DiscardUnknown(m)
}

var xxx_messageInfo_Customer proto.InternalMessageInfo

func (m *Customer) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Customer) GetMerchantId() string {
	if m != nil {
		return m.MerchantId
	}
	return ""
}

func (m *Customer) GetStoreId() string {
	if m != nil {
		return m.StoreId
	}
	return ""
}

func (m *Customer) GetExternalId() string {
	if m != nil {
		return m.ExternalId
	}
	return ""
}

func (m *Customer) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Customer) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Customer) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Customer) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *Customer) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Customer) GetMiddleName() string {
	if m != nil {
		return m.MiddleName
	}
	return ""
}

func (m *Customer) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *Customer) GetSuffix() string {
	if m != nil {
		return m.Suffix
	}
	return ""
}

func (m *Customer) GetTaxNumber() string {
	if m != nil {
		return m.TaxNumber
	}
	return ""
}

func (m *Customer) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *Customer) GetDob() string {
	if m != nil {
		return m.Dob
	}
	return ""
}

func (m *Customer) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *Customer) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Customer) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

func (m *Customer) GetTags() string {
	if m != nil {
		return m.Tags
	}
	return ""
}

func (m *Customer) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Customer) GetLastUpdatedSource() string {
	if m != nil {
		return m.LastUpdatedSource
	}
	return ""
}

func (m *Customer) GetStoreCredit() string {
	if m != nil {
		return m.StoreCredit
	}
	return ""
}

func (m *Customer) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *Customer) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *Customer) GetCompanyId() string {
	if m != nil {
		return m.CompanyId
	}
	return ""
}

func (m *Customer) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *Customer) GetDefaultBillingId() string {
	if m != nil {
		return m.DefaultBillingId
	}
	return ""
}

func (m *Customer) GetDefaultBillingExternalId() string {
	if m != nil {
		return m.DefaultBillingExternalId
	}
	return ""
}

func (m *Customer) GetDefaultShippingId() string {
	if m != nil {
		return m.DefaultShippingId
	}
	return ""
}

func (m *Customer) GetDefaultShippingExternalId() string {
	if m != nil {
		return m.DefaultShippingExternalId
	}
	return ""
}

func (m *Customer) GetIsSubscribed() bool {
	if m != nil {
		return m.IsSubscribed
	}
	return false
}

func (m *Customer) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Customer) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (*Customer) XXX_MessageName() string {
	return "message.customer.Customer"
}

type OneCustomerRequest struct {
	MerchantId           string   `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OneCustomerRequest) Reset()         { *m = OneCustomerRequest{} }
func (m *OneCustomerRequest) String() string { return proto.CompactTextString(m) }
func (*OneCustomerRequest) ProtoMessage()    {}
func (*OneCustomerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f52c63852255b1ea, []int{1}
}
func (m *OneCustomerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OneCustomerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OneCustomerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OneCustomerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OneCustomerRequest.Merge(m, src)
}
func (m *OneCustomerRequest) XXX_Size() int {
	return m.Size()
}
func (m *OneCustomerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OneCustomerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OneCustomerRequest proto.InternalMessageInfo

func (m *OneCustomerRequest) GetMerchantId() string {
	if m != nil {
		return m.MerchantId
	}
	return ""
}

func (m *OneCustomerRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (*OneCustomerRequest) XXX_MessageName() string {
	return "message.customer.OneCustomerRequest"
}

type ListCustomerRequest struct {
	MerchantId           string   `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	Page                 uint32   `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Limit                uint32   `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	WithCount            bool     `protobuf:"varint,4,opt,name=with_count,json=withCount,proto3" json:"with_count,omitempty"`
	CreatedAtMin         string   `protobuf:"bytes,5,opt,name=created_at_min,json=createdAtMin,proto3" json:"created_at_min,omitempty"`
	CreatedAtMax         string   `protobuf:"bytes,6,opt,name=created_at_max,json=createdAtMax,proto3" json:"created_at_max,omitempty"`
	PageInfo             string   `protobuf:"bytes,7,opt,name=page_info,json=pageInfo,proto3" json:"page_info,omitempty"`
	Search               string   `protobuf:"bytes,8,opt,name=search,proto3" json:"search,omitempty"`
	Fields               string   `protobuf:"bytes,9,opt,name=fields,proto3" json:"fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListCustomerRequest) Reset()         { *m = ListCustomerRequest{} }
func (m *ListCustomerRequest) String() string { return proto.CompactTextString(m) }
func (*ListCustomerRequest) ProtoMessage()    {}
func (*ListCustomerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f52c63852255b1ea, []int{2}
}
func (m *ListCustomerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCustomerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCustomerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCustomerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCustomerRequest.Merge(m, src)
}
func (m *ListCustomerRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListCustomerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCustomerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListCustomerRequest proto.InternalMessageInfo

func (m *ListCustomerRequest) GetMerchantId() string {
	if m != nil {
		return m.MerchantId
	}
	return ""
}

func (m *ListCustomerRequest) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListCustomerRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListCustomerRequest) GetWithCount() bool {
	if m != nil {
		return m.WithCount
	}
	return false
}

func (m *ListCustomerRequest) GetCreatedAtMin() string {
	if m != nil {
		return m.CreatedAtMin
	}
	return ""
}

func (m *ListCustomerRequest) GetCreatedAtMax() string {
	if m != nil {
		return m.CreatedAtMax
	}
	return ""
}

func (m *ListCustomerRequest) GetPageInfo() string {
	if m != nil {
		return m.PageInfo
	}
	return ""
}

func (m *ListCustomerRequest) GetSearch() string {
	if m != nil {
		return m.Search
	}
	return ""
}

func (m *ListCustomerRequest) GetFields() string {
	if m != nil {
		return m.Fields
	}
	return ""
}

func (*ListCustomerRequest) XXX_MessageName() string {
	return "message.customer.ListCustomerRequest"
}

type ListCustomerResponse struct {
	Items                []*Customer `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	MaxPage              uint32      `protobuf:"varint,2,opt,name=max_page,json=maxPage,proto3" json:"max_page,omitempty"`
	TotalCount           uint32      `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Page                 uint32      `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	Limit                uint32      `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	PageInfo             string      `protobuf:"bytes,6,opt,name=page_info,json=pageInfo,proto3" json:"page_info,omitempty"`
	NextPageInfo         string      `protobuf:"bytes,7,opt,name=next_page_info,json=nextPageInfo,proto3" json:"next_page_info,omitempty"`
	PrevPageInfo         string      `protobuf:"bytes,8,opt,name=prev_page_info,json=prevPageInfo,proto3" json:"prev_page_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ListCustomerResponse) Reset()         { *m = ListCustomerResponse{} }
func (m *ListCustomerResponse) String() string { return proto.CompactTextString(m) }
func (*ListCustomerResponse) ProtoMessage()    {}
func (*ListCustomerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f52c63852255b1ea, []int{3}
}
func (m *ListCustomerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCustomerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCustomerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCustomerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCustomerResponse.Merge(m, src)
}
func (m *ListCustomerResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListCustomerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCustomerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCustomerResponse proto.InternalMessageInfo

func (m *ListCustomerResponse) GetItems() []*Customer {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ListCustomerResponse) GetMaxPage() uint32 {
	if m != nil {
		return m.MaxPage
	}
	return 0
}

func (m *ListCustomerResponse) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *ListCustomerResponse) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListCustomerResponse) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListCustomerResponse) GetPageInfo() string {
	if m != nil {
		return m.PageInfo
	}
	return ""
}

func (m *ListCustomerResponse) GetNextPageInfo() string {
	if m != nil {
		return m.NextPageInfo
	}
	return ""
}

func (m *ListCustomerResponse) GetPrevPageInfo() string {
	if m != nil {
		return m.PrevPageInfo
	}
	return ""
}

func (*ListCustomerResponse) XXX_MessageName() string {
	return "message.customer.ListCustomerResponse"
}
func init() {
	proto.RegisterType((*Customer)(nil), "message.customer.Customer")
	golang_proto.RegisterType((*Customer)(nil), "message.customer.Customer")
	proto.RegisterType((*OneCustomerRequest)(nil), "message.customer.OneCustomerRequest")
	golang_proto.RegisterType((*OneCustomerRequest)(nil), "message.customer.OneCustomerRequest")
	proto.RegisterType((*ListCustomerRequest)(nil), "message.customer.ListCustomerRequest")
	golang_proto.RegisterType((*ListCustomerRequest)(nil), "message.customer.ListCustomerRequest")
	proto.RegisterType((*ListCustomerResponse)(nil), "message.customer.ListCustomerResponse")
	golang_proto.RegisterType((*ListCustomerResponse)(nil), "message.customer.ListCustomerResponse")
}

func init() { proto.RegisterFile("customer/customer.proto", fileDescriptor_f52c63852255b1ea) }
func init() { golang_proto.RegisterFile("customer/customer.proto", fileDescriptor_f52c63852255b1ea) }

var fileDescriptor_f52c63852255b1ea = []byte{
	// 1068 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xcd, 0x6e, 0x23, 0x45,
	0x17, 0x55, 0x3b, 0x8e, 0xe3, 0x54, 0x9c, 0xbf, 0x4a, 0x26, 0xa9, 0x38, 0xf9, 0x9c, 0x8c, 0x27,
	0x33, 0x5f, 0x18, 0x11, 0x1b, 0x0d, 0x3b, 0xc4, 0x68, 0x94, 0x09, 0x11, 0xb2, 0x04, 0xc3, 0xc8,
	0x11, 0x0b, 0x58, 0xd0, 0x2a, 0x77, 0x5d, 0xb7, 0x4b, 0xea, 0xee, 0x6a, 0xba, 0xaa, 0x83, 0x23,
	0xc4, 0x02, 0x36, 0x3c, 0x00, 0x0b, 0x78, 0x1c, 0x96, 0xb3, 0x44, 0xe2, 0x05, 0x50, 0x86, 0x07,
	0x41, 0x75, 0xab, 0xdb, 0xe3, 0xd8, 0xa3, 0xf0, 0xb3, 0xab, 0x7b, 0xce, 0xb9, 0xf7, 0xf6, 0x3d,
	0x55, 0x5d, 0xdd, 0x64, 0x37, 0xc8, 0xb5, 0x51, 0x31, 0x64, 0xdd, 0x72, 0xd1, 0x49, 0x33, 0x65,
	0x14, 0xdd, 0x88, 0x41, 0x6b, 0x1e, 0x42, 0xa7, 0xc4, 0x9b, 0xa7, 0xa1, 0x34, 0xa3, 0x7c, 0xd0,
	0x09, 0x54, 0xdc, 0x0d, 0x55, 0xa8, 0xba, 0x28, 0x1c, 0xe4, 0x43, 0x8c, 0x30, 0xc0, 0x95, 0x2b,
	0xd0, 0x3c, 0x08, 0x95, 0x0a, 0x23, 0xe8, 0xf2, 0x54, 0x76, 0x79, 0x92, 0x28, 0xc3, 0x8d, 0x54,
	0x89, 0x2e, 0xd8, 0xfd, 0x82, 0x9d, 0xd4, 0x80, 0x38, 0x35, 0xd7, 0x8e, 0x6c, 0xff, 0x58, 0x27,
	0xf5, 0xf3, 0xa2, 0x2d, 0x5d, 0x23, 0x15, 0x29, 0x98, 0x77, 0xe4, 0x9d, 0x2c, 0xf7, 0x2b, 0x52,
	0xd0, 0x43, 0xb2, 0x12, 0x43, 0x16, 0x8c, 0x78, 0x62, 0x7c, 0x29, 0x58, 0x05, 0x09, 0x52, 0x42,
	0x3d, 0x41, 0xf7, 0x48, 0x5d, 0x1b, 0x95, 0x81, 0x65, 0x17, 0x90, 0x5d, 0xc2, 0xb8, 0x87, 0xb9,
	0x30, 0x36, 0x90, 0x25, 0x3c, 0xb2, 0x6c, 0xd5, 0xe5, 0x96, 0x50, 0x4f, 0x50, 0x4a, 0xaa, 0xe6,
	0x3a, 0x05, 0x46, 0x90, 0xc1, 0x35, 0xdd, 0x21, 0x35, 0x6d, 0xb8, 0xc9, 0x35, 0x5b, 0x41, 0xb4,
	0x88, 0xac, 0x36, 0x50, 0x02, 0x58, 0xc3, 0x69, 0xed, 0xda, 0x6a, 0xd3, 0x0c, 0x86, 0x72, 0xcc,
	0x56, 0x9d, 0xd6, 0x45, 0xf4, 0x7f, 0x84, 0x0c, 0x65, 0xa6, 0x8d, 0x9f, 0xf0, 0x18, 0xd8, 0x1a,
	0x72, 0xcb, 0x88, 0xbc, 0xe0, 0x31, 0xe0, 0x4c, 0x52, 0x88, 0x08, 0x1c, 0xbf, 0x5e, 0xcc, 0x84,
	0x10, 0x0a, 0xf6, 0xc9, 0x72, 0xc4, 0xcb, 0xf4, 0x0d, 0xa4, 0xeb, 0x16, 0x40, 0xd2, 0x3e, 0x60,
	0x3e, 0xb4, 0x4d, 0x37, 0x8b, 0x07, 0xc4, 0xc8, 0x36, 0x35, 0x7c, 0xec, 0x27, 0x79, 0x3c, 0x80,
	0x8c, 0x51, 0xd7, 0xd4, 0xf0, 0xf1, 0x0b, 0x04, 0x6c, 0x5a, 0x08, 0x89, 0x80, 0x8c, 0x6d, 0xb9,
	0x34, 0x17, 0xd1, 0x0d, 0xb2, 0x20, 0xd4, 0x80, 0x6d, 0x23, 0x68, 0x97, 0x74, 0x9b, 0x2c, 0xa6,
	0x23, 0x95, 0x00, 0xbb, 0x87, 0x98, 0x0b, 0x2c, 0x0a, 0x31, 0x97, 0x11, 0xdb, 0x71, 0x28, 0x06,
	0xd6, 0x95, 0x44, 0x19, 0x60, 0xbb, 0xce, 0x15, 0xbb, 0x46, 0x57, 0x79, 0xa8, 0x19, 0x2b, 0x5c,
	0xe5, 0xa1, 0xc6, 0x87, 0x56, 0x79, 0x16, 0x00, 0xdb, 0x2b, 0x1e, 0x1a, 0x23, 0xda, 0x21, 0x5b,
	0x38, 0x69, 0x9e, 0x0a, 0x6e, 0x40, 0xf8, 0x85, 0xa8, 0x89, 0xa2, 0x4d, 0x4b, 0x7d, 0xee, 0x98,
	0x4b, 0xa7, 0xbf, 0x4f, 0x1a, 0x6e, 0xb7, 0x83, 0x0c, 0x84, 0x34, 0xac, 0x85, 0xc2, 0x15, 0xc4,
	0xce, 0x11, 0xb2, 0xe6, 0x49, 0xed, 0xf3, 0xc0, 0xc8, 0x2b, 0x60, 0x87, 0x47, 0xde, 0x49, 0xbd,
	0x5f, 0x97, 0xfa, 0x0c, 0x63, 0x7b, 0x5a, 0xc2, 0x4c, 0xe5, 0xa9, 0x3d, 0x0f, 0x47, 0xee, 0xb4,
	0x60, 0xdc, 0x13, 0xd6, 0xbf, 0x40, 0xc5, 0x29, 0x4f, 0xae, 0x2d, 0x79, 0xdf, 0xf9, 0x57, 0x20,
	0x3d, 0x61, 0x3b, 0x97, 0x34, 0x6e, 0x4b, 0xdb, 0x75, 0x2e, 0x30, 0xdc, 0x99, 0x77, 0x09, 0x15,
	0x30, 0xe4, 0x79, 0x64, 0xfc, 0x81, 0x8c, 0x22, 0x99, 0x84, 0xb6, 0xd2, 0x03, 0x14, 0x6e, 0x14,
	0xcc, 0x73, 0x47, 0xf4, 0x04, 0x7d, 0x4a, 0xf6, 0x67, 0xd5, 0xd3, 0xa7, 0xf5, 0x18, 0xd3, 0xd8,
	0xed, 0xb4, 0x8b, 0x37, 0x67, 0xb7, 0x43, 0xb6, 0xca, 0x74, 0x3d, 0x92, 0x69, 0x5a, 0x74, 0x7b,
	0xe8, 0x9c, 0x2b, 0xa8, 0xcb, 0x82, 0xe9, 0x09, 0xfa, 0x8c, 0x1c, 0xcc, 0xe9, 0xa7, 0xfb, 0x3d,
	0xc2, 0xc4, 0xbd, 0x99, 0xc4, 0xa9, 0x86, 0x0f, 0xc8, 0xaa, 0xd4, 0xbe, 0xce, 0x07, 0x3a, 0xc8,
	0xe4, 0x00, 0x04, 0xfb, 0x3f, 0x7a, 0xdb, 0x90, 0xfa, 0x72, 0x82, 0xa1, 0x89, 0x19, 0xe0, 0x56,
	0x72, 0xc3, 0x3e, 0x2c, 0x4c, 0x74, 0xc8, 0x99, 0xb1, 0x74, 0xb9, 0xd3, 0xdc, 0xb0, 0xa7, 0x8e,
	0x2e, 0x90, 0x33, 0xd3, 0xbe, 0x20, 0xf4, 0xb3, 0x04, 0xca, 0xbb, 0xa0, 0x0f, 0x5f, 0xe7, 0xa0,
	0xcd, 0xec, 0x15, 0xe0, 0xcd, 0x5d, 0x01, 0xee, 0xce, 0xa8, 0x94, 0x77, 0x46, 0xfb, 0x97, 0x0a,
	0xd9, 0xfa, 0x44, 0x6a, 0xf3, 0xaf, 0x0b, 0x51, 0x52, 0x4d, 0x79, 0x08, 0x58, 0x6a, 0xb5, 0x8f,
	0x6b, 0x7b, 0xee, 0x23, 0x19, 0x4b, 0x83, 0x97, 0xcb, 0x6a, 0xdf, 0x05, 0x76, 0x90, 0x6f, 0xa4,
	0x19, 0xf9, 0x81, 0xca, 0x13, 0x83, 0x37, 0x4b, 0xbd, 0xbf, 0x6c, 0x91, 0x73, 0x0b, 0xd0, 0x63,
	0xb2, 0xf6, 0xc6, 0x06, 0x3f, 0x96, 0x09, 0x5b, 0xc4, 0x66, 0x8d, 0x89, 0x15, 0x9f, 0xca, 0x64,
	0x56, 0xc5, 0xc7, 0xac, 0x36, 0xab, 0xe2, 0x63, 0x7b, 0x9e, 0xed, 0x83, 0xf8, 0x32, 0x19, 0x2a,
	0xb6, 0xe4, 0x2e, 0x03, 0x0b, 0xf4, 0x92, 0xa1, 0xc2, 0xf7, 0x0a, 0x78, 0x16, 0x8c, 0x58, 0xbd,
	0x78, 0xaf, 0x30, 0xb2, 0xf8, 0x50, 0x42, 0x24, 0x34, 0x5b, 0x76, 0xb8, 0x8b, 0xda, 0x3f, 0x57,
	0xc8, 0xf6, 0x6d, 0x6b, 0x74, 0xaa, 0x12, 0x0d, 0xf4, 0x3d, 0xb2, 0x28, 0x0d, 0xc4, 0x9a, 0x79,
	0x47, 0x0b, 0x27, 0x2b, 0x4f, 0x9a, 0x9d, 0xd9, 0x0f, 0x42, 0x67, 0x92, 0xe2, 0x84, 0xf6, 0x55,
	0x8a, 0xf9, 0xd8, 0x9f, 0x32, 0x6c, 0x29, 0xe6, 0xe3, 0x97, 0xd6, 0xb3, 0x43, 0xb2, 0x62, 0x94,
	0xe1, 0x51, 0x61, 0x8f, 0x73, 0x8e, 0x20, 0xe4, 0xfc, 0x29, 0x8d, 0xae, 0xbe, 0xcd, 0xe8, 0xc5,
	0x69, 0xa3, 0x6f, 0x4d, 0x5f, 0x9b, 0x99, 0xfe, 0x98, 0xac, 0x25, 0x30, 0x36, 0xfe, 0xac, 0x3f,
	0x0d, 0x8b, 0xbe, 0x9c, 0x52, 0xa5, 0x19, 0x5c, 0x4d, 0xa9, 0x9c, 0x57, 0x0d, 0x8b, 0x96, 0xaa,
	0x27, 0xdf, 0x57, 0xc9, 0x7a, 0x39, 0xe2, 0x25, 0x64, 0x57, 0x32, 0x00, 0xfa, 0x05, 0xa9, 0x9d,
	0xe3, 0x56, 0xd0, 0x3b, 0xfc, 0x68, 0xde, 0xc1, 0xb5, 0x77, 0x7f, 0xf8, 0xfd, 0xcf, 0x9f, 0x2a,
	0x9b, 0xed, 0x46, 0x37, 0x54, 0x93, 0x6f, 0xee, 0x07, 0xde, 0x63, 0xfa, 0x15, 0xa9, 0xb9, 0x9b,
	0xed, 0x3f, 0x97, 0x3e, 0xc0, 0xd2, 0x3b, 0xcd, 0xcd, 0xe9, 0xd2, 0xdd, 0x6f, 0xa5, 0xf8, 0xce,
	0xd6, 0x1f, 0x90, 0x85, 0x8f, 0xc1, 0xd0, 0xe3, 0xf9, 0x02, 0xf3, 0x6f, 0xd8, 0x9d, 0x6d, 0xf6,
	0xb0, 0xcd, 0x16, 0x9d, 0x6f, 0x43, 0x23, 0x52, 0xb5, 0x67, 0x89, 0x3e, 0x9c, 0x4f, 0x7f, 0xcb,
	0xeb, 0xd7, 0x7c, 0xf4, 0x77, 0x32, 0x77, 0x14, 0xdb, 0xf7, 0xb0, 0xe3, 0x3a, 0x5d, 0x9d, 0xee,
	0xa8, 0x29, 0x27, 0xb5, 0x8f, 0x20, 0x02, 0x03, 0xff, 0x70, 0xa8, 0x9d, 0x8e, 0xfb, 0xe9, 0xe8,
	0x94, 0x3f, 0x1d, 0x9d, 0x0b, 0xfb, 0xd3, 0x51, 0x0e, 0xf4, 0x78, 0x7e, 0xa0, 0xe7, 0xcf, 0x5e,
	0xdd, 0xb4, 0xbc, 0xdf, 0x6e, 0x5a, 0xde, 0x1f, 0x37, 0x2d, 0xef, 0xd7, 0xd7, 0x2d, 0xef, 0xd5,
	0xeb, 0x96, 0xf7, 0xe5, 0x3b, 0x53, 0x7f, 0x42, 0x42, 0x26, 0x23, 0x93, 0x76, 0x23, 0x30, 0xfa,
	0x34, 0x54, 0xa7, 0xe9, 0xc0, 0xfe, 0x33, 0x4c, 0xaa, 0x0c, 0x6a, 0xd8, 0xeb, 0xfd, 0xbf, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x93, 0x90, 0xc1, 0xa9, 0x68, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomerServiceClient is the client API for CustomerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomerServiceClient interface {
	Create(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Customer, error)
	Update(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Customer, error)
	Get(ctx context.Context, in *OneCustomerRequest, opts ...grpc.CallOption) (*Customer, error)
	List(ctx context.Context, in *ListCustomerRequest, opts ...grpc.CallOption) (*ListCustomerResponse, error)
	Delete(ctx context.Context, in *OneCustomerRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type customerServiceClient struct {
	cc *grpc.ClientConn
}

func NewCustomerServiceClient(cc *grpc.ClientConn) CustomerServiceClient {
	return &customerServiceClient{cc}
}

func (c *customerServiceClient) Create(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/message.customer.CustomerService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) Update(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/message.customer.CustomerService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) Get(ctx context.Context, in *OneCustomerRequest, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/message.customer.CustomerService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) List(ctx context.Context, in *ListCustomerRequest, opts ...grpc.CallOption) (*ListCustomerResponse, error) {
	out := new(ListCustomerResponse)
	err := c.cc.Invoke(ctx, "/message.customer.CustomerService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) Delete(ctx context.Context, in *OneCustomerRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/message.customer.CustomerService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerServiceServer is the server API for CustomerService service.
type CustomerServiceServer interface {
	Create(context.Context, *Customer) (*Customer, error)
	Update(context.Context, *Customer) (*Customer, error)
	Get(context.Context, *OneCustomerRequest) (*Customer, error)
	List(context.Context, *ListCustomerRequest) (*ListCustomerResponse, error)
	Delete(context.Context, *OneCustomerRequest) (*types.Empty, error)
}

// UnimplementedCustomerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCustomerServiceServer struct {
}

func (*UnimplementedCustomerServiceServer) Create(ctx context.Context, req *Customer) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedCustomerServiceServer) Update(ctx context.Context, req *Customer) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedCustomerServiceServer) Get(ctx context.Context, req *OneCustomerRequest) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedCustomerServiceServer) List(ctx context.Context, req *ListCustomerRequest) (*ListCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedCustomerServiceServer) Delete(ctx context.Context, req *OneCustomerRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterCustomerServiceServer(s *grpc.Server, srv CustomerServiceServer) {
	s.RegisterService(&_CustomerService_serviceDesc, srv)
}

func _CustomerService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Customer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.customer.CustomerService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).Create(ctx, req.(*Customer))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Customer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.customer.CustomerService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).Update(ctx, req.(*Customer))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OneCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.customer.CustomerService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).Get(ctx, req.(*OneCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.customer.CustomerService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).List(ctx, req.(*ListCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OneCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message.customer.CustomerService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).Delete(ctx, req.(*OneCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "message.customer.CustomerService",
	HandlerType: (*CustomerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CustomerService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CustomerService_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _CustomerService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _CustomerService_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CustomerService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "customer/customer.proto",
}

func (m *Customer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Customer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Customer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintCustomer(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xea
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintCustomer(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe2
	}
	if m.IsSubscribed {
		i--
		if m.IsSubscribed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb8
	}
	if len(m.DefaultShippingExternalId) > 0 {
		i -= len(m.DefaultShippingExternalId)
		copy(dAtA[i:], m.DefaultShippingExternalId)
		i = encodeVarintCustomer(dAtA, i, uint64(len(m.DefaultShippingExternalId)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb2
	}
	if len(m.DefaultShippingId) > 0 {
		i -= len(m.DefaultShippingId)
		copy(dAtA[i:], m.DefaultShippingId)
		i = encodeVarintCustomer(dAtA, i, uint64(len(m.DefaultShippingId)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xaa
	}
	if len(m.DefaultBillingExternalId) > 0 {
		i -= len(m.DefaultBillingExternalId)
		copy(dAtA[i:], m.DefaultBillingExternalId)
		i = encodeVarintCustomer(dAtA, i, uint64(len(m.DefaultBillingExternalId)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	if len(m.DefaultBillingId) > 0 {
		i -= len(m.DefaultBillingId)
		copy(dAtA[i:], m.DefaultBillingId)
		i = encodeVarintCustomer(dAtA, i, uint64(len(m.DefaultBillingId)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	if len(m.CompanyName) > 0 {
		i -= len(m.CompanyName)
		copy(dAtA[i:], m.CompanyName)
		i = encodeVarintCustomer(dAtA, i, uint64(len(m.CompanyName)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	if len(m.CompanyId) > 0 {
		i -= len(m.CompanyId)
		copy(dAtA[i:], m.CompanyId)
		i = encodeVarintCustomer(dAtA, i, uint64(len(m.CompanyId)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	if len(m.GroupId) > 0 {
		i -= len(m.GroupId)
		copy(dAtA[i:], m.GroupId)
		i = encodeVarintCustomer(dAtA, i, uint64(len(m.GroupId)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	if len(m.StoreCredit) > 0 {
		i -= len(m.StoreCredit)
		copy(dAtA[i:], m.StoreCredit)
		i = encodeVarintCustomer(dAtA, i, uint64(len(m.StoreCredit)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	if len(m.LastUpdatedSource) > 0 {
		i -= len(m.LastUpdatedSource)
		copy(dAtA[i:], m.LastUpdatedSource)
		i = encodeVarintCustomer(dAtA, i, uint64(len(m.LastUpdatedSource)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintCustomer(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if len(m.Tags) > 0 {
		i -= len(m.Tags)
		copy(dAtA[i:], m.Tags)
		i = encodeVarintCustomer(dAtA, i, uint64(len(m.Tags)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.Note) > 0 {
		i -= len(m.Note)
		copy(dAtA[i:], m.Note)
		i = encodeVarintCustomer(dAtA, i, uint64(len(m.Note)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintCustomer(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintCustomer(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.Dob) > 0 {
		i -= len(m.Dob)
		copy(dAtA[i:], m.Dob)
		i = encodeVarintCustomer(dAtA, i, uint64(len(m.Dob)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.Gender) > 0 {
		i -= len(m.Gender)
		copy(dAtA[i:], m.Gender)
		i = encodeVarintCustomer(dAtA, i, uint64(len(m.Gender)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.TaxNumber) > 0 {
		i -= len(m.TaxNumber)
		copy(dAtA[i:], m.TaxNumber)
		i = encodeVarintCustomer(dAtA, i, uint64(len(m.TaxNumber)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.Suffix) > 0 {
		i -= len(m.Suffix)
		copy(dAtA[i:], m.Suffix)
		i = encodeVarintCustomer(dAtA, i, uint64(len(m.Suffix)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintCustomer(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.MiddleName) > 0 {
		i -= len(m.MiddleName)
		copy(dAtA[i:], m.MiddleName)
		i = encodeVarintCustomer(dAtA, i, uint64(len(m.MiddleName)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintCustomer(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintCustomer(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintCustomer(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintCustomer(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintCustomer(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ExternalId) > 0 {
		i -= len(m.ExternalId)
		copy(dAtA[i:], m.ExternalId)
		i = encodeVarintCustomer(dAtA, i, uint64(len(m.ExternalId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.StoreId) > 0 {
		i -= len(m.StoreId)
		copy(dAtA[i:], m.StoreId)
		i = encodeVarintCustomer(dAtA, i, uint64(len(m.StoreId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MerchantId) > 0 {
		i -= len(m.MerchantId)
		copy(dAtA[i:], m.MerchantId)
		i = encodeVarintCustomer(dAtA, i, uint64(len(m.MerchantId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCustomer(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OneCustomerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OneCustomerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OneCustomerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCustomer(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MerchantId) > 0 {
		i -= len(m.MerchantId)
		copy(dAtA[i:], m.MerchantId)
		i = encodeVarintCustomer(dAtA, i, uint64(len(m.MerchantId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListCustomerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCustomerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCustomerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Fields) > 0 {
		i -= len(m.Fields)
		copy(dAtA[i:], m.Fields)
		i = encodeVarintCustomer(dAtA, i, uint64(len(m.Fields)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Search) > 0 {
		i -= len(m.Search)
		copy(dAtA[i:], m.Search)
		i = encodeVarintCustomer(dAtA, i, uint64(len(m.Search)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.PageInfo) > 0 {
		i -= len(m.PageInfo)
		copy(dAtA[i:], m.PageInfo)
		i = encodeVarintCustomer(dAtA, i, uint64(len(m.PageInfo)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CreatedAtMax) > 0 {
		i -= len(m.CreatedAtMax)
		copy(dAtA[i:], m.CreatedAtMax)
		i = encodeVarintCustomer(dAtA, i, uint64(len(m.CreatedAtMax)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CreatedAtMin) > 0 {
		i -= len(m.CreatedAtMin)
		copy(dAtA[i:], m.CreatedAtMin)
		i = encodeVarintCustomer(dAtA, i, uint64(len(m.CreatedAtMin)))
		i--
		dAtA[i] = 0x2a
	}
	if m.WithCount {
		i--
		if m.WithCount {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Limit != 0 {
		i = encodeVarintCustomer(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x18
	}
	if m.Page != 0 {
		i = encodeVarintCustomer(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x10
	}
	if len(m.MerchantId) > 0 {
		i -= len(m.MerchantId)
		copy(dAtA[i:], m.MerchantId)
		i = encodeVarintCustomer(dAtA, i, uint64(len(m.MerchantId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListCustomerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCustomerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCustomerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PrevPageInfo) > 0 {
		i -= len(m.PrevPageInfo)
		copy(dAtA[i:], m.PrevPageInfo)
		i = encodeVarintCustomer(dAtA, i, uint64(len(m.PrevPageInfo)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.NextPageInfo) > 0 {
		i -= len(m.NextPageInfo)
		copy(dAtA[i:], m.NextPageInfo)
		i = encodeVarintCustomer(dAtA, i, uint64(len(m.NextPageInfo)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PageInfo) > 0 {
		i -= len(m.PageInfo)
		copy(dAtA[i:], m.PageInfo)
		i = encodeVarintCustomer(dAtA, i, uint64(len(m.PageInfo)))
		i--
		dAtA[i] = 0x32
	}
	if m.Limit != 0 {
		i = encodeVarintCustomer(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x28
	}
	if m.Page != 0 {
		i = encodeVarintCustomer(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x20
	}
	if m.TotalCount != 0 {
		i = encodeVarintCustomer(dAtA, i, uint64(m.TotalCount))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxPage != 0 {
		i = encodeVarintCustomer(dAtA, i, uint64(m.MaxPage))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCustomer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintCustomer(dAtA []byte, offset int, v uint64) int {
	offset -= sovCustomer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Customer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCustomer(uint64(l))
	}
	l = len(m.MerchantId)
	if l > 0 {
		n += 1 + l + sovCustomer(uint64(l))
	}
	l = len(m.StoreId)
	if l > 0 {
		n += 1 + l + sovCustomer(uint64(l))
	}
	l = len(m.ExternalId)
	if l > 0 {
		n += 1 + l + sovCustomer(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovCustomer(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovCustomer(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovCustomer(uint64(l))
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovCustomer(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovCustomer(uint64(l))
	}
	l = len(m.MiddleName)
	if l > 0 {
		n += 1 + l + sovCustomer(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 2 + l + sovCustomer(uint64(l))
	}
	l = len(m.Suffix)
	if l > 0 {
		n += 2 + l + sovCustomer(uint64(l))
	}
	l = len(m.TaxNumber)
	if l > 0 {
		n += 2 + l + sovCustomer(uint64(l))
	}
	l = len(m.Gender)
	if l > 0 {
		n += 2 + l + sovCustomer(uint64(l))
	}
	l = len(m.Dob)
	if l > 0 {
		n += 2 + l + sovCustomer(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 2 + l + sovCustomer(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 2 + l + sovCustomer(uint64(l))
	}
	l = len(m.Note)
	if l > 0 {
		n += 2 + l + sovCustomer(uint64(l))
	}
	l = len(m.Tags)
	if l > 0 {
		n += 2 + l + sovCustomer(uint64(l))
	}
	l = len(m.Source)
	if l > 0 {
		n += 2 + l + sovCustomer(uint64(l))
	}
	l = len(m.LastUpdatedSource)
	if l > 0 {
		n += 2 + l + sovCustomer(uint64(l))
	}
	l = len(m.StoreCredit)
	if l > 0 {
		n += 2 + l + sovCustomer(uint64(l))
	}
	if m.IsActive {
		n += 3
	}
	l = len(m.GroupId)
	if l > 0 {
		n += 2 + l + sovCustomer(uint64(l))
	}
	l = len(m.CompanyId)
	if l > 0 {
		n += 2 + l + sovCustomer(uint64(l))
	}
	l = len(m.CompanyName)
	if l > 0 {
		n += 2 + l + sovCustomer(uint64(l))
	}
	l = len(m.DefaultBillingId)
	if l > 0 {
		n += 2 + l + sovCustomer(uint64(l))
	}
	l = len(m.DefaultBillingExternalId)
	if l > 0 {
		n += 2 + l + sovCustomer(uint64(l))
	}
	l = len(m.DefaultShippingId)
	if l > 0 {
		n += 2 + l + sovCustomer(uint64(l))
	}
	l = len(m.DefaultShippingExternalId)
	if l > 0 {
		n += 2 + l + sovCustomer(uint64(l))
	}
	if m.IsSubscribed {
		n += 3
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 2 + l + sovCustomer(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 2 + l + sovCustomer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OneCustomerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MerchantId)
	if l > 0 {
		n += 1 + l + sovCustomer(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCustomer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListCustomerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MerchantId)
	if l > 0 {
		n += 1 + l + sovCustomer(uint64(l))
	}
	if m.Page != 0 {
		n += 1 + sovCustomer(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovCustomer(uint64(m.Limit))
	}
	if m.WithCount {
		n += 2
	}
	l = len(m.CreatedAtMin)
	if l > 0 {
		n += 1 + l + sovCustomer(uint64(l))
	}
	l = len(m.CreatedAtMax)
	if l > 0 {
		n += 1 + l + sovCustomer(uint64(l))
	}
	l = len(m.PageInfo)
	if l > 0 {
		n += 1 + l + sovCustomer(uint64(l))
	}
	l = len(m.Search)
	if l > 0 {
		n += 1 + l + sovCustomer(uint64(l))
	}
	l = len(m.Fields)
	if l > 0 {
		n += 1 + l + sovCustomer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListCustomerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCustomer(uint64(l))
		}
	}
	if m.MaxPage != 0 {
		n += 1 + sovCustomer(uint64(m.MaxPage))
	}
	if m.TotalCount != 0 {
		n += 1 + sovCustomer(uint64(m.TotalCount))
	}
	if m.Page != 0 {
		n += 1 + sovCustomer(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovCustomer(uint64(m.Limit))
	}
	l = len(m.PageInfo)
	if l > 0 {
		n += 1 + l + sovCustomer(uint64(l))
	}
	l = len(m.NextPageInfo)
	if l > 0 {
		n += 1 + l + sovCustomer(uint64(l))
	}
	l = len(m.PrevPageInfo)
	if l > 0 {
		n += 1 + l + sovCustomer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCustomer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCustomer(x uint64) (n int) {
	return sovCustomer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Customer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Customer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Customer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MerchantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoreId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MiddleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MiddleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suffix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Suffix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaxNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaxNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dob", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dob = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Note = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdatedSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastUpdatedSource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreCredit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoreCredit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultBillingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultBillingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultBillingExternalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultBillingExternalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultShippingId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultShippingId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultShippingExternalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultShippingExternalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSubscribed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSubscribed = bool(v != 0)
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCustomer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCustomer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OneCustomerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OneCustomerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OneCustomerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MerchantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCustomer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCustomer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCustomerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCustomerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCustomerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerchantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MerchantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithCount", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithCount = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAtMin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAtMin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAtMax", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAtMax = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PageInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Search", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Search = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCustomer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCustomer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCustomerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCustomer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCustomerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCustomerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCustomer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCustomer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Customer{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPage", wireType)
			}
			m.MaxPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPage |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PageInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPageInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevPageInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCustomer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCustomer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevPageInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCustomer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCustomer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCustomer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCustomer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCustomer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCustomer
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCustomer
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCustomer
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCustomer        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCustomer          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCustomer = fmt.Errorf("proto: unexpected end of group")
)
