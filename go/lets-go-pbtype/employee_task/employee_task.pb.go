// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: employee_task/employee_task.proto

package employee_task

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Employee_Task struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EmployeeId           string   `protobuf:"bytes,2,opt,name=employee_id,json=employeeId,proto3" json:"employee_id,omitempty"`
	TaskId               string   `protobuf:"bytes,3,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	CreatedAt            string   `protobuf:"bytes,20,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            string   `protobuf:"bytes,21,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Employee_Task) Reset()         { *m = Employee_Task{} }
func (m *Employee_Task) String() string { return proto.CompactTextString(m) }
func (*Employee_Task) ProtoMessage()    {}
func (*Employee_Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_65ae0a09007cd69a, []int{0}
}
func (m *Employee_Task) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Employee_Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Employee_Task.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Employee_Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Employee_Task.Merge(m, src)
}
func (m *Employee_Task) XXX_Size() int {
	return m.Size()
}
func (m *Employee_Task) XXX_DiscardUnknown() {
	xxx_messageInfo_Employee_Task.DiscardUnknown(m)
}

var xxx_messageInfo_Employee_Task proto.InternalMessageInfo

func (m *Employee_Task) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Employee_Task) GetEmployeeId() string {
	if m != nil {
		return m.EmployeeId
	}
	return ""
}

func (m *Employee_Task) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *Employee_Task) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Employee_Task) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (*Employee_Task) XXX_MessageName() string {
	return "employee_task.Employee_Task"
}
func init() {
	proto.RegisterType((*Employee_Task)(nil), "employee_task.Employee_Task")
	golang_proto.RegisterType((*Employee_Task)(nil), "employee_task.Employee_Task")
}

func init() { proto.RegisterFile("employee_task/employee_task.proto", fileDescriptor_65ae0a09007cd69a) }
func init() {
	golang_proto.RegisterFile("employee_task/employee_task.proto", fileDescriptor_65ae0a09007cd69a)
}

var fileDescriptor_65ae0a09007cd69a = []byte{
	// 355 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xb1, 0x4e, 0xf3, 0x30,
	0x14, 0x85, 0xe5, 0xfc, 0x52, 0x7e, 0xd5, 0xa8, 0x20, 0x4c, 0xa1, 0x55, 0x28, 0x01, 0x32, 0xa1,
	0x4a, 0x49, 0x24, 0xd8, 0xd8, 0x0a, 0x65, 0xe8, 0x0a, 0x48, 0x48, 0x2c, 0xc5, 0xa9, 0x8d, 0x6b,
	0x35, 0x8d, 0xad, 0xc6, 0x45, 0xca, 0xca, 0x2b, 0x30, 0xf0, 0x3a, 0x8c, 0x1d, 0x2b, 0xf1, 0x02,
	0xa8, 0xe5, 0x41, 0x90, 0x9d, 0x04, 0x08, 0x03, 0x6c, 0x39, 0xe7, 0xbb, 0xb9, 0xf7, 0xf8, 0xda,
	0xf0, 0x90, 0x4e, 0x64, 0x2c, 0x32, 0x4a, 0x07, 0x0a, 0xa7, 0xe3, 0xb0, 0xa2, 0x02, 0x39, 0x15,
	0x4a, 0xa0, 0x7a, 0xc5, 0x74, 0x7c, 0xc6, 0xd5, 0x68, 0x16, 0x05, 0x43, 0x31, 0x09, 0x99, 0x60,
	0x22, 0x34, 0x55, 0xd1, 0xec, 0xde, 0x28, 0x23, 0xcc, 0x57, 0xfe, 0xb7, 0xb3, 0xcb, 0x84, 0x60,
	0x31, 0xfd, 0xaa, 0xa2, 0x13, 0xa9, 0xb2, 0x02, 0xb6, 0x0b, 0x88, 0x25, 0x0f, 0x71, 0x92, 0x08,
	0x85, 0x15, 0x17, 0x49, 0x9a, 0x53, 0xef, 0x19, 0xc0, 0xfa, 0x45, 0x39, 0xfb, 0x1a, 0xa7, 0x63,
	0xb4, 0x0e, 0x2d, 0x4e, 0x5a, 0xe0, 0x00, 0x1c, 0xd5, 0x2e, 0x2d, 0x4e, 0xd0, 0x3e, 0x5c, 0xfb,
	0x0c, 0xc7, 0x49, 0xcb, 0x32, 0x00, 0x96, 0x56, 0x9f, 0xa0, 0x26, 0xfc, 0xaf, 0x43, 0x6b, 0xf8,
	0xcf, 0x40, 0x5b, 0xcb, 0x3e, 0x41, 0x7b, 0x10, 0x0e, 0xa7, 0x14, 0x2b, 0x4a, 0x06, 0x58, 0xb5,
	0x1a, 0x86, 0xd5, 0x0a, 0xa7, 0xab, 0x34, 0x9e, 0x49, 0x52, 0xe2, 0xed, 0x1c, 0x17, 0x4e, 0x57,
	0x1d, 0x2f, 0x00, 0xdc, 0x2a, 0x93, 0xe9, 0x60, 0x57, 0x74, 0xfa, 0xc0, 0x87, 0x14, 0xdd, 0x41,
	0xfb, 0xdc, 0xf4, 0x40, 0xed, 0xa0, 0xba, 0xca, 0xca, 0x39, 0x9c, 0x5f, 0xa9, 0xe7, 0x3c, 0xbe,
	0xbe, 0x3f, 0x59, 0x0d, 0x6f, 0x23, 0x64, 0x22, 0xd4, 0xdc, 0xc7, 0x69, 0xca, 0x59, 0x72, 0x0a,
	0x3a, 0xe8, 0x06, 0xda, 0x3d, 0x1a, 0xd3, 0x3f, 0x27, 0xec, 0x04, 0xf9, 0x6a, 0x83, 0x72, 0xef,
	0x9a, 0xab, 0xcc, 0x6b, 0x9a, 0xde, 0x9b, 0x9d, 0x9f, 0xbd, 0xcf, 0x7a, 0xf3, 0xa5, 0x0b, 0x16,
	0x4b, 0x17, 0xbc, 0x2d, 0x5d, 0xf0, 0xb2, 0x72, 0xc1, 0x7c, 0xe5, 0x82, 0xdb, 0xe0, 0xdb, 0x65,
	0x13, 0x9e, 0x8c, 0x94, 0x0c, 0x63, 0xaa, 0x52, 0x9f, 0x09, 0x5f, 0x46, 0x2a, 0x93, 0xb4, 0xfa,
	0x62, 0x22, 0xdb, 0x8c, 0x3b, 0xf9, 0x08, 0x00, 0x00, 0xff, 0xff, 0xbc, 0xb0, 0x62, 0x65, 0x57,
	0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EmployeeTaskServiceClient is the client API for EmployeeTaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EmployeeTaskServiceClient interface {
	Create(ctx context.Context, in *Employee_Task, opts ...grpc.CallOption) (*Employee_Task, error)
	Delete(ctx context.Context, in *Employee_Task, opts ...grpc.CallOption) (*types.Empty, error)
}

type employeeTaskServiceClient struct {
	cc *grpc.ClientConn
}

func NewEmployeeTaskServiceClient(cc *grpc.ClientConn) EmployeeTaskServiceClient {
	return &employeeTaskServiceClient{cc}
}

func (c *employeeTaskServiceClient) Create(ctx context.Context, in *Employee_Task, opts ...grpc.CallOption) (*Employee_Task, error) {
	out := new(Employee_Task)
	err := c.cc.Invoke(ctx, "/employee_task.EmployeeTaskService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeTaskServiceClient) Delete(ctx context.Context, in *Employee_Task, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/employee_task.EmployeeTaskService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmployeeTaskServiceServer is the server API for EmployeeTaskService service.
type EmployeeTaskServiceServer interface {
	Create(context.Context, *Employee_Task) (*Employee_Task, error)
	Delete(context.Context, *Employee_Task) (*types.Empty, error)
}

// UnimplementedEmployeeTaskServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEmployeeTaskServiceServer struct {
}

func (*UnimplementedEmployeeTaskServiceServer) Create(ctx context.Context, req *Employee_Task) (*Employee_Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedEmployeeTaskServiceServer) Delete(ctx context.Context, req *Employee_Task) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterEmployeeTaskServiceServer(s *grpc.Server, srv EmployeeTaskServiceServer) {
	s.RegisterService(&_EmployeeTaskService_serviceDesc, srv)
}

func _EmployeeTaskService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Employee_Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeTaskServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/employee_task.EmployeeTaskService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeTaskServiceServer).Create(ctx, req.(*Employee_Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeTaskService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Employee_Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeTaskServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/employee_task.EmployeeTaskService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeTaskServiceServer).Delete(ctx, req.(*Employee_Task))
	}
	return interceptor(ctx, in, info, handler)
}

var _EmployeeTaskService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "employee_task.EmployeeTaskService",
	HandlerType: (*EmployeeTaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _EmployeeTaskService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _EmployeeTaskService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "employee_task/employee_task.proto",
}

func (m *Employee_Task) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Employee_Task) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Employee_Task) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintEmployeeTask(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintEmployeeTask(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintEmployeeTask(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EmployeeId) > 0 {
		i -= len(m.EmployeeId)
		copy(dAtA[i:], m.EmployeeId)
		i = encodeVarintEmployeeTask(dAtA, i, uint64(len(m.EmployeeId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintEmployeeTask(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEmployeeTask(dAtA []byte, offset int, v uint64) int {
	offset -= sovEmployeeTask(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Employee_Task) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEmployeeTask(uint64(l))
	}
	l = len(m.EmployeeId)
	if l > 0 {
		n += 1 + l + sovEmployeeTask(uint64(l))
	}
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovEmployeeTask(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 2 + l + sovEmployeeTask(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 2 + l + sovEmployeeTask(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovEmployeeTask(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEmployeeTask(x uint64) (n int) {
	return sovEmployeeTask(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Employee_Task) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEmployeeTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Employee_Task: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Employee_Task: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmployeeTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmployeeTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmployeeTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmployeeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmployeeTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmployeeTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmployeeTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmployeeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmployeeTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmployeeTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmployeeTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmployeeTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmployeeTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmployeeTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmployeeTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmployeeTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmployeeTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEmployeeTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEmployeeTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEmployeeTask(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEmployeeTask
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEmployeeTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEmployeeTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEmployeeTask
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEmployeeTask
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEmployeeTask
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEmployeeTask        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEmployeeTask          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEmployeeTask = fmt.Errorf("proto: unexpected end of group")
)
