// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: company/company.proto

package company

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Company struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Phone                string   `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	Email                string   `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	Address              string   `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	TaxNumber            string   `protobuf:"bytes,6,opt,name=tax_number,json=taxNumber,proto3" json:"tax_number,omitempty"`
	TotalEmployee        uint32   `protobuf:"varint,7,opt,name=total_employee,json=totalEmployee,proto3" json:"total_employee,omitempty"`
	TotalProject         uint32   `protobuf:"varint,8,opt,name=total_project,json=totalProject,proto3" json:"total_project,omitempty"`
	CreatedAt            string   `protobuf:"bytes,20,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            string   `protobuf:"bytes,21,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Company) Reset()         { *m = Company{} }
func (m *Company) String() string { return proto.CompactTextString(m) }
func (*Company) ProtoMessage()    {}
func (*Company) Descriptor() ([]byte, []int) {
	return fileDescriptor_13f68715d26ff6fb, []int{0}
}
func (m *Company) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Company) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Company.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Company) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Company.Merge(m, src)
}
func (m *Company) XXX_Size() int {
	return m.Size()
}
func (m *Company) XXX_DiscardUnknown() {
	xxx_messageInfo_Company.DiscardUnknown(m)
}

var xxx_messageInfo_Company proto.InternalMessageInfo

func (m *Company) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Company) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Company) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *Company) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Company) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Company) GetTaxNumber() string {
	if m != nil {
		return m.TaxNumber
	}
	return ""
}

func (m *Company) GetTotalEmployee() uint32 {
	if m != nil {
		return m.TotalEmployee
	}
	return 0
}

func (m *Company) GetTotalProject() uint32 {
	if m != nil {
		return m.TotalProject
	}
	return 0
}

func (m *Company) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Company) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (*Company) XXX_MessageName() string {
	return "company.Company"
}

type OneCompanyRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OneCompanyRequest) Reset()         { *m = OneCompanyRequest{} }
func (m *OneCompanyRequest) String() string { return proto.CompactTextString(m) }
func (*OneCompanyRequest) ProtoMessage()    {}
func (*OneCompanyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_13f68715d26ff6fb, []int{1}
}
func (m *OneCompanyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OneCompanyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OneCompanyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OneCompanyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OneCompanyRequest.Merge(m, src)
}
func (m *OneCompanyRequest) XXX_Size() int {
	return m.Size()
}
func (m *OneCompanyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OneCompanyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OneCompanyRequest proto.InternalMessageInfo

func (m *OneCompanyRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (*OneCompanyRequest) XXX_MessageName() string {
	return "company.OneCompanyRequest"
}

type ListCompanyRequest struct {
	Page                 uint32   `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Limit                uint32   `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	CreatedAtMin         string   `protobuf:"bytes,5,opt,name=created_at_min,json=createdAtMin,proto3" json:"created_at_min,omitempty"`
	CreatedAtMax         string   `protobuf:"bytes,6,opt,name=created_at_max,json=createdAtMax,proto3" json:"created_at_max,omitempty"`
	SearchField          string   `protobuf:"bytes,7,opt,name=search_field,json=searchField,proto3" json:"search_field,omitempty"`
	SearchValue          string   `protobuf:"bytes,8,opt,name=search_value,json=searchValue,proto3" json:"search_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListCompanyRequest) Reset()         { *m = ListCompanyRequest{} }
func (m *ListCompanyRequest) String() string { return proto.CompactTextString(m) }
func (*ListCompanyRequest) ProtoMessage()    {}
func (*ListCompanyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_13f68715d26ff6fb, []int{2}
}
func (m *ListCompanyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCompanyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCompanyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCompanyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCompanyRequest.Merge(m, src)
}
func (m *ListCompanyRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListCompanyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCompanyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListCompanyRequest proto.InternalMessageInfo

func (m *ListCompanyRequest) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListCompanyRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListCompanyRequest) GetCreatedAtMin() string {
	if m != nil {
		return m.CreatedAtMin
	}
	return ""
}

func (m *ListCompanyRequest) GetCreatedAtMax() string {
	if m != nil {
		return m.CreatedAtMax
	}
	return ""
}

func (m *ListCompanyRequest) GetSearchField() string {
	if m != nil {
		return m.SearchField
	}
	return ""
}

func (m *ListCompanyRequest) GetSearchValue() string {
	if m != nil {
		return m.SearchValue
	}
	return ""
}

func (*ListCompanyRequest) XXX_MessageName() string {
	return "company.ListCompanyRequest"
}

type ListCompanyResponse struct {
	Items                []*Company `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	MaxPage              uint32     `protobuf:"varint,2,opt,name=max_page,json=maxPage,proto3" json:"max_page,omitempty"`
	TotalCount           uint32     `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Page                 uint32     `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	Limit                uint32     `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	SearchField          string     `protobuf:"bytes,6,opt,name=search_field,json=searchField,proto3" json:"search_field,omitempty"`
	SearchValue          string     `protobuf:"bytes,7,opt,name=search_value,json=searchValue,proto3" json:"search_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ListCompanyResponse) Reset()         { *m = ListCompanyResponse{} }
func (m *ListCompanyResponse) String() string { return proto.CompactTextString(m) }
func (*ListCompanyResponse) ProtoMessage()    {}
func (*ListCompanyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_13f68715d26ff6fb, []int{3}
}
func (m *ListCompanyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCompanyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCompanyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCompanyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCompanyResponse.Merge(m, src)
}
func (m *ListCompanyResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListCompanyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCompanyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCompanyResponse proto.InternalMessageInfo

func (m *ListCompanyResponse) GetItems() []*Company {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ListCompanyResponse) GetMaxPage() uint32 {
	if m != nil {
		return m.MaxPage
	}
	return 0
}

func (m *ListCompanyResponse) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *ListCompanyResponse) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListCompanyResponse) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListCompanyResponse) GetSearchField() string {
	if m != nil {
		return m.SearchField
	}
	return ""
}

func (m *ListCompanyResponse) GetSearchValue() string {
	if m != nil {
		return m.SearchValue
	}
	return ""
}

func (*ListCompanyResponse) XXX_MessageName() string {
	return "company.ListCompanyResponse"
}
func init() {
	proto.RegisterType((*Company)(nil), "company.Company")
	golang_proto.RegisterType((*Company)(nil), "company.Company")
	proto.RegisterType((*OneCompanyRequest)(nil), "company.OneCompanyRequest")
	golang_proto.RegisterType((*OneCompanyRequest)(nil), "company.OneCompanyRequest")
	proto.RegisterType((*ListCompanyRequest)(nil), "company.ListCompanyRequest")
	golang_proto.RegisterType((*ListCompanyRequest)(nil), "company.ListCompanyRequest")
	proto.RegisterType((*ListCompanyResponse)(nil), "company.ListCompanyResponse")
	golang_proto.RegisterType((*ListCompanyResponse)(nil), "company.ListCompanyResponse")
}

func init() { proto.RegisterFile("company/company.proto", fileDescriptor_13f68715d26ff6fb) }
func init() { golang_proto.RegisterFile("company/company.proto", fileDescriptor_13f68715d26ff6fb) }

var fileDescriptor_13f68715d26ff6fb = []byte{
	// 680 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xe5, 0xfc, 0x6d, 0x37, 0x4d, 0x28, 0x4b, 0x53, 0x99, 0xb4, 0x84, 0xe2, 0x02, 0x8a,
	0x2a, 0x35, 0x96, 0xca, 0x8d, 0x03, 0x52, 0x69, 0x0b, 0x42, 0xa2, 0x50, 0x05, 0x51, 0x21, 0x2e,
	0xd6, 0xc6, 0x9e, 0x3a, 0x8b, 0x6c, 0xaf, 0xb1, 0xd7, 0x55, 0x2a, 0xc4, 0x85, 0x57, 0xe0, 0xca,
	0x89, 0x27, 0xe1, 0xd8, 0x63, 0x25, 0x5e, 0x00, 0xb5, 0x5c, 0x78, 0x0b, 0xe4, 0x59, 0x3b, 0x0d,
	0x71, 0x05, 0x9c, 0xb2, 0xf3, 0x9b, 0xd9, 0x6f, 0x67, 0x3e, 0x6f, 0x96, 0xb4, 0x6d, 0xe1, 0x87,
	0x2c, 0x38, 0x31, 0xb3, 0xdf, 0x7e, 0x18, 0x09, 0x29, 0x68, 0x3d, 0x0b, 0x3b, 0x9b, 0x2e, 0x97,
	0xa3, 0x64, 0xd8, 0xb7, 0x85, 0x6f, 0xba, 0xc2, 0x15, 0x26, 0xe6, 0x87, 0xc9, 0x11, 0x46, 0x18,
	0xe0, 0x4a, 0xed, 0xeb, 0xac, 0xb8, 0x42, 0xb8, 0x1e, 0x5c, 0x56, 0x81, 0x1f, 0xca, 0x4c, 0xb4,
	0xb3, 0x9a, 0x25, 0x59, 0xc8, 0x4d, 0x16, 0x04, 0x42, 0x32, 0xc9, 0x45, 0x10, 0xab, 0xac, 0xf1,
	0xa5, 0x44, 0xea, 0x3b, 0xea, 0x54, 0xda, 0x22, 0x25, 0xee, 0xe8, 0xda, 0x9a, 0xd6, 0x9b, 0x1f,
	0x94, 0xb8, 0x43, 0x29, 0xa9, 0x04, 0xcc, 0x07, 0xbd, 0x84, 0x04, 0xd7, 0x74, 0x89, 0x54, 0xc3,
	0x91, 0x08, 0x40, 0x2f, 0x23, 0x54, 0x41, 0x4a, 0xc1, 0x67, 0xdc, 0xd3, 0x2b, 0x8a, 0x62, 0x40,
	0x75, 0x52, 0x67, 0x8e, 0x13, 0x41, 0x1c, 0xeb, 0x55, 0xe4, 0x79, 0x48, 0x6f, 0x11, 0x22, 0xd9,
	0xd8, 0x0a, 0x12, 0x7f, 0x08, 0x91, 0x5e, 0xc3, 0xe4, 0xbc, 0x64, 0xe3, 0x17, 0x08, 0xe8, 0x3d,
	0xd2, 0x92, 0x42, 0x32, 0xcf, 0x02, 0x3f, 0xf4, 0xc4, 0x09, 0x80, 0x5e, 0x5f, 0xd3, 0x7a, 0xcd,
	0x41, 0x13, 0xe9, 0x5e, 0x06, 0xe9, 0x3a, 0x51, 0xc0, 0x0a, 0x23, 0xf1, 0x0e, 0x6c, 0xa9, 0xcf,
	0x61, 0xd5, 0x02, 0xc2, 0x03, 0xc5, 0xd2, 0xa3, 0xec, 0x08, 0x98, 0x04, 0xc7, 0x62, 0x52, 0x5f,
	0x52, 0x47, 0x65, 0x64, 0x1b, 0xd3, 0x49, 0xe8, 0xe4, 0xe9, 0xb6, 0x4a, 0x67, 0x64, 0x5b, 0x1a,
	0xeb, 0xe4, 0xfa, 0xcb, 0x00, 0x32, 0x83, 0x06, 0xf0, 0x3e, 0x81, 0x58, 0xce, 0xfa, 0x64, 0x9c,
	0x69, 0x84, 0x3e, 0xe7, 0xb1, 0x9c, 0x29, 0xa3, 0xa4, 0x12, 0x32, 0x57, 0x39, 0xd5, 0x1c, 0xe0,
	0x3a, 0x35, 0xca, 0xe3, 0x3e, 0x97, 0x68, 0x54, 0x73, 0xa0, 0x02, 0x7a, 0x97, 0xb4, 0x2e, 0x7b,
	0xb4, 0x7c, 0x1e, 0x64, 0x7e, 0x2d, 0x4c, 0xfa, 0xdc, 0xe7, 0xc1, 0x6c, 0x15, 0x1b, 0x67, 0xc6,
	0x4d, 0x55, 0xb1, 0x31, 0xbd, 0x43, 0x16, 0x62, 0x60, 0x91, 0x3d, 0xb2, 0x8e, 0x38, 0x78, 0x0e,
	0x3a, 0x37, 0x3f, 0x68, 0x28, 0xf6, 0x24, 0x45, 0x53, 0x25, 0xc7, 0xcc, 0x4b, 0x00, 0x6d, 0x9b,
	0x94, 0x1c, 0xa6, 0xc8, 0xf8, 0xa5, 0x91, 0x1b, 0x7f, 0x8c, 0x14, 0x87, 0x22, 0x88, 0x81, 0xde,
	0x27, 0x55, 0x2e, 0xc1, 0x8f, 0x75, 0x6d, 0xad, 0xdc, 0x6b, 0x6c, 0x2d, 0xf6, 0xf3, 0x0b, 0x9c,
	0x17, 0xaa, 0x34, 0xbd, 0x49, 0xe6, 0x7c, 0x36, 0xb6, 0x70, 0xfe, 0x12, 0x8e, 0x5a, 0xf7, 0xd9,
	0xf8, 0x20, 0xb5, 0xe0, 0x36, 0x69, 0xa8, 0xaf, 0x66, 0x8b, 0x24, 0x90, 0x99, 0x3b, 0x04, 0xd1,
	0x4e, 0x4a, 0x26, 0xbe, 0x55, 0xae, 0xf2, 0xad, 0x3a, 0xed, 0xdb, 0xec, 0xac, 0xb5, 0x7f, 0xcf,
	0x5a, 0x2f, 0xcc, 0xba, 0xf5, 0xb5, 0x4c, 0x5a, 0x59, 0xfb, 0xaf, 0x20, 0x3a, 0xe6, 0x36, 0xd0,
	0x5d, 0x52, 0xdb, 0x41, 0x53, 0x69, 0x61, 0xc2, 0x4e, 0x81, 0x18, 0xcb, 0x9f, 0xbe, 0xff, 0xfc,
	0x5c, 0x5a, 0x34, 0x1a, 0xa6, 0x2b, 0xf2, 0x7f, 0xf4, 0x43, 0x6d, 0x83, 0x3e, 0x23, 0xb5, 0xd7,
	0x78, 0x93, 0xfe, 0x4b, 0x65, 0x05, 0x55, 0xda, 0x9d, 0xc5, 0x29, 0x15, 0xf3, 0x03, 0x77, 0x3e,
	0xa6, 0x52, 0xfb, 0xa4, 0xfc, 0x14, 0x24, 0xed, 0x4c, 0x76, 0x15, 0x6e, 0xe5, 0x15, 0x8a, 0x3a,
	0x2a, 0x52, 0x5a, 0x50, 0xa4, 0x6f, 0x48, 0x25, 0xfd, 0xba, 0x74, 0x65, 0xb2, 0xa7, 0x78, 0x7f,
	0x3b, 0xab, 0x57, 0x27, 0xd5, 0x4d, 0x30, 0xda, 0x28, 0x7e, 0x8d, 0x36, 0x2f, 0xc5, 0x39, 0xc4,
	0xf4, 0x90, 0xd4, 0x76, 0xc1, 0x03, 0x09, 0x7f, 0xed, 0x75, 0xb9, 0xaf, 0x1e, 0xa5, 0x7e, 0xfe,
	0x62, 0xf5, 0xf7, 0xd2, 0x17, 0x2b, 0xef, 0x78, 0xa3, 0xd0, 0xf1, 0xe3, 0x47, 0xa7, 0xe7, 0x5d,
	0xed, 0xec, 0xbc, 0xab, 0xfd, 0x38, 0xef, 0x6a, 0xdf, 0x2e, 0xba, 0xda, 0xe9, 0x45, 0x57, 0x7b,
	0xdb, 0x9b, 0x7a, 0x27, 0x1d, 0x1e, 0x8c, 0x64, 0x68, 0x7a, 0x20, 0xe3, 0x4d, 0x57, 0x6c, 0x86,
	0x43, 0x79, 0x12, 0x42, 0x2e, 0x32, 0xac, 0xe1, 0x49, 0x0f, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff,
	0x25, 0xf6, 0x48, 0xa4, 0x7a, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CompanyServiceClient is the client API for CompanyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CompanyServiceClient interface {
	Create(ctx context.Context, in *Company, opts ...grpc.CallOption) (*Company, error)
	Update(ctx context.Context, in *Company, opts ...grpc.CallOption) (*Company, error)
	Get(ctx context.Context, in *OneCompanyRequest, opts ...grpc.CallOption) (*Company, error)
	List(ctx context.Context, in *ListCompanyRequest, opts ...grpc.CallOption) (*ListCompanyResponse, error)
	Delete(ctx context.Context, in *OneCompanyRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type companyServiceClient struct {
	cc *grpc.ClientConn
}

func NewCompanyServiceClient(cc *grpc.ClientConn) CompanyServiceClient {
	return &companyServiceClient{cc}
}

func (c *companyServiceClient) Create(ctx context.Context, in *Company, opts ...grpc.CallOption) (*Company, error) {
	out := new(Company)
	err := c.cc.Invoke(ctx, "/company.CompanyService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) Update(ctx context.Context, in *Company, opts ...grpc.CallOption) (*Company, error) {
	out := new(Company)
	err := c.cc.Invoke(ctx, "/company.CompanyService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) Get(ctx context.Context, in *OneCompanyRequest, opts ...grpc.CallOption) (*Company, error) {
	out := new(Company)
	err := c.cc.Invoke(ctx, "/company.CompanyService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) List(ctx context.Context, in *ListCompanyRequest, opts ...grpc.CallOption) (*ListCompanyResponse, error) {
	out := new(ListCompanyResponse)
	err := c.cc.Invoke(ctx, "/company.CompanyService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) Delete(ctx context.Context, in *OneCompanyRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/company.CompanyService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompanyServiceServer is the server API for CompanyService service.
type CompanyServiceServer interface {
	Create(context.Context, *Company) (*Company, error)
	Update(context.Context, *Company) (*Company, error)
	Get(context.Context, *OneCompanyRequest) (*Company, error)
	List(context.Context, *ListCompanyRequest) (*ListCompanyResponse, error)
	Delete(context.Context, *OneCompanyRequest) (*types.Empty, error)
}

// UnimplementedCompanyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCompanyServiceServer struct {
}

func (*UnimplementedCompanyServiceServer) Create(ctx context.Context, req *Company) (*Company, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedCompanyServiceServer) Update(ctx context.Context, req *Company) (*Company, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedCompanyServiceServer) Get(ctx context.Context, req *OneCompanyRequest) (*Company, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedCompanyServiceServer) List(ctx context.Context, req *ListCompanyRequest) (*ListCompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedCompanyServiceServer) Delete(ctx context.Context, req *OneCompanyRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterCompanyServiceServer(s *grpc.Server, srv CompanyServiceServer) {
	s.RegisterService(&_CompanyService_serviceDesc, srv)
}

func _CompanyService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Company)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).Create(ctx, req.(*Company))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Company)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).Update(ctx, req.(*Company))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OneCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).Get(ctx, req.(*OneCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).List(ctx, req.(*ListCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OneCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).Delete(ctx, req.(*OneCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CompanyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "company.CompanyService",
	HandlerType: (*CompanyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CompanyService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CompanyService_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _CompanyService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _CompanyService_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CompanyService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "company/company.proto",
}

func (m *Company) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Company) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Company) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.TotalProject != 0 {
		i = encodeVarintCompany(dAtA, i, uint64(m.TotalProject))
		i--
		dAtA[i] = 0x40
	}
	if m.TotalEmployee != 0 {
		i = encodeVarintCompany(dAtA, i, uint64(m.TotalEmployee))
		i--
		dAtA[i] = 0x38
	}
	if len(m.TaxNumber) > 0 {
		i -= len(m.TaxNumber)
		copy(dAtA[i:], m.TaxNumber)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.TaxNumber)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OneCompanyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OneCompanyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OneCompanyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListCompanyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCompanyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCompanyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SearchValue) > 0 {
		i -= len(m.SearchValue)
		copy(dAtA[i:], m.SearchValue)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.SearchValue)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.SearchField) > 0 {
		i -= len(m.SearchField)
		copy(dAtA[i:], m.SearchField)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.SearchField)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CreatedAtMax) > 0 {
		i -= len(m.CreatedAtMax)
		copy(dAtA[i:], m.CreatedAtMax)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CreatedAtMax)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CreatedAtMin) > 0 {
		i -= len(m.CreatedAtMin)
		copy(dAtA[i:], m.CreatedAtMin)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.CreatedAtMin)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Limit != 0 {
		i = encodeVarintCompany(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if m.Page != 0 {
		i = encodeVarintCompany(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x18
	}
	return len(dAtA) - i, nil
}

func (m *ListCompanyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCompanyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCompanyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SearchValue) > 0 {
		i -= len(m.SearchValue)
		copy(dAtA[i:], m.SearchValue)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.SearchValue)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SearchField) > 0 {
		i -= len(m.SearchField)
		copy(dAtA[i:], m.SearchField)
		i = encodeVarintCompany(dAtA, i, uint64(len(m.SearchField)))
		i--
		dAtA[i] = 0x32
	}
	if m.Limit != 0 {
		i = encodeVarintCompany(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x28
	}
	if m.Page != 0 {
		i = encodeVarintCompany(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x20
	}
	if m.TotalCount != 0 {
		i = encodeVarintCompany(dAtA, i, uint64(m.TotalCount))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxPage != 0 {
		i = encodeVarintCompany(dAtA, i, uint64(m.MaxPage))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCompany(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintCompany(dAtA []byte, offset int, v uint64) int {
	offset -= sovCompany(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Company) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.TaxNumber)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	if m.TotalEmployee != 0 {
		n += 1 + sovCompany(uint64(m.TotalEmployee))
	}
	if m.TotalProject != 0 {
		n += 1 + sovCompany(uint64(m.TotalProject))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 2 + l + sovCompany(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 2 + l + sovCompany(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OneCompanyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListCompanyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovCompany(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovCompany(uint64(m.Limit))
	}
	l = len(m.CreatedAtMin)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.CreatedAtMax)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.SearchField)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.SearchValue)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListCompanyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCompany(uint64(l))
		}
	}
	if m.MaxPage != 0 {
		n += 1 + sovCompany(uint64(m.MaxPage))
	}
	if m.TotalCount != 0 {
		n += 1 + sovCompany(uint64(m.TotalCount))
	}
	if m.Page != 0 {
		n += 1 + sovCompany(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovCompany(uint64(m.Limit))
	}
	l = len(m.SearchField)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	l = len(m.SearchValue)
	if l > 0 {
		n += 1 + l + sovCompany(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCompany(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCompany(x uint64) (n int) {
	return sovCompany(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Company) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Company: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Company: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaxNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaxNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalEmployee", wireType)
			}
			m.TotalEmployee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalEmployee |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalProject", wireType)
			}
			m.TotalProject = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalProject |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OneCompanyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OneCompanyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OneCompanyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCompanyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCompanyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCompanyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAtMin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAtMin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAtMax", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAtMax = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchField", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchField = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCompanyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCompanyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCompanyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Company{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPage", wireType)
			}
			m.MaxPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPage |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchField", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchField = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompany
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompany
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompany(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCompany
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCompany(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCompany
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCompany
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCompany
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCompany
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCompany
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCompany        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCompany          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCompany = fmt.Errorf("proto: unexpected end of group")
)
