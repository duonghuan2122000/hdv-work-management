// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: employee_project/employee_project.proto

package employee_project

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Employee_Project struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EmployeeId           string   `protobuf:"bytes,2,opt,name=employee_id,json=employeeId,proto3" json:"employee_id,omitempty"`
	ProjectId            string   `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	CreatedAt            string   `protobuf:"bytes,20,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            string   `protobuf:"bytes,21,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Employee_Project) Reset()         { *m = Employee_Project{} }
func (m *Employee_Project) String() string { return proto.CompactTextString(m) }
func (*Employee_Project) ProtoMessage()    {}
func (*Employee_Project) Descriptor() ([]byte, []int) {
	return fileDescriptor_33791dcb8ed3f7cc, []int{0}
}
func (m *Employee_Project) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Employee_Project) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Employee_Project.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Employee_Project) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Employee_Project.Merge(m, src)
}
func (m *Employee_Project) XXX_Size() int {
	return m.Size()
}
func (m *Employee_Project) XXX_DiscardUnknown() {
	xxx_messageInfo_Employee_Project.DiscardUnknown(m)
}

var xxx_messageInfo_Employee_Project proto.InternalMessageInfo

func (m *Employee_Project) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Employee_Project) GetEmployeeId() string {
	if m != nil {
		return m.EmployeeId
	}
	return ""
}

func (m *Employee_Project) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *Employee_Project) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Employee_Project) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (*Employee_Project) XXX_MessageName() string {
	return "employee_project.Employee_Project"
}
func init() {
	proto.RegisterType((*Employee_Project)(nil), "employee_project.Employee_Project")
	golang_proto.RegisterType((*Employee_Project)(nil), "employee_project.Employee_Project")
}

func init() {
	proto.RegisterFile("employee_project/employee_project.proto", fileDescriptor_33791dcb8ed3f7cc)
}
func init() {
	golang_proto.RegisterFile("employee_project/employee_project.proto", fileDescriptor_33791dcb8ed3f7cc)
}

var fileDescriptor_33791dcb8ed3f7cc = []byte{
	// 364 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xcd, 0x4a, 0x3b, 0x31,
	0x14, 0xc5, 0xc9, 0xfc, 0xa1, 0xd0, 0xfc, 0x41, 0xcb, 0xa0, 0x52, 0xaa, 0x8e, 0x32, 0x1b, 0xa5,
	0xd0, 0x09, 0x55, 0x41, 0xe8, 0xae, 0x7e, 0x20, 0xee, 0x44, 0x77, 0x6e, 0xca, 0x7c, 0x5c, 0xa7,
	0x91, 0xe9, 0x24, 0x4c, 0x6f, 0x85, 0xa1, 0x74, 0xe3, 0xda, 0x9d, 0x0f, 0xa0, 0x8f, 0xe2, 0xb2,
	0x4b, 0xc1, 0x17, 0x90, 0xd6, 0x07, 0x91, 0x26, 0x33, 0x6d, 0x69, 0x37, 0x75, 0x97, 0x9c, 0xdf,
	0x21, 0x39, 0xb9, 0x27, 0xf4, 0x00, 0x3a, 0x32, 0x12, 0x29, 0x40, 0x4b, 0x26, 0xe2, 0x11, 0x7c,
	0x64, 0x8b, 0x82, 0x23, 0x13, 0x81, 0xc2, 0x2c, 0x2d, 0xea, 0x95, 0x5a, 0xc8, 0xb1, 0xdd, 0xf3,
	0x1c, 0x5f, 0x74, 0x58, 0x28, 0x42, 0xc1, 0x94, 0xd1, 0xeb, 0x3d, 0xa8, 0x9d, 0xda, 0xa8, 0x95,
	0x3e, 0xa0, 0xb2, 0x1d, 0x0a, 0x11, 0x46, 0x30, 0x73, 0x41, 0x47, 0x62, 0x9a, 0xc1, 0x9d, 0x0c,
	0xba, 0x92, 0x33, 0x37, 0x8e, 0x05, 0xba, 0xc8, 0x45, 0xdc, 0xd5, 0xd4, 0x7e, 0x27, 0xb4, 0x74,
	0x99, 0x5f, 0x7f, 0xa3, 0xaf, 0x37, 0xd7, 0xa8, 0xc1, 0x83, 0x32, 0xd9, 0x27, 0x87, 0xc5, 0x5b,
	0x83, 0x07, 0xe6, 0x1e, 0xfd, 0x3f, 0x8d, 0xc8, 0x83, 0xb2, 0xa1, 0x00, 0xcd, 0xa5, 0xeb, 0xc0,
	0xdc, 0xa5, 0x34, 0x8b, 0x3e, 0xe1, 0xff, 0x14, 0x2f, 0x66, 0x8a, 0xc6, 0x7e, 0x02, 0x2e, 0x42,
	0xd0, 0x72, 0xb1, 0xbc, 0xa1, 0x71, 0xa6, 0x34, 0x71, 0x82, 0x7b, 0x32, 0xc8, 0xf1, 0xa6, 0xc6,
	0x99, 0xd2, 0xc4, 0xa3, 0x37, 0x83, 0xae, 0xe7, 0x11, 0xef, 0x20, 0x79, 0xe2, 0x3e, 0x98, 0x2f,
	0x84, 0x16, 0xce, 0xd5, 0x01, 0xa6, 0xed, 0x2c, 0x8d, 0x75, 0xf1, 0x41, 0x95, 0x15, 0x3c, 0x76,
	0xe3, 0xf9, 0xeb, 0xe7, 0xd5, 0x38, 0xb1, 0x19, 0xd3, 0xf3, 0x56, 0x8d, 0xf5, 0x67, 0xcf, 0x1a,
	0x4c, 0xeb, 0x63, 0xfd, 0xb9, 0x69, 0x0c, 0x1a, 0xa4, 0x6a, 0x0e, 0x68, 0xe1, 0x02, 0x22, 0x58,
	0x31, 0xcd, 0x96, 0xa3, 0x2b, 0x71, 0xf2, 0xbe, 0x26, 0x16, 0x4c, 0xed, 0x53, 0x95, 0xa0, 0x5e,
	0xfd, 0x6b, 0x82, 0xb3, 0xab, 0xe1, 0xc8, 0x22, 0x9f, 0x23, 0x8b, 0x7c, 0x8f, 0x2c, 0xf2, 0x31,
	0xb6, 0xc8, 0x70, 0x6c, 0x91, 0xfb, 0xfa, 0xdc, 0x27, 0x0a, 0x78, 0xdc, 0x46, 0xc9, 0x22, 0xc0,
	0x6e, 0x2d, 0x14, 0x35, 0xe9, 0x61, 0x2a, 0x61, 0xe9, 0x3f, 0x7a, 0x05, 0x95, 0xe8, 0xf8, 0x37,
	0x00, 0x00, 0xff, 0xff, 0xa2, 0xeb, 0x38, 0xa3, 0xbb, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EmployeeServiceClient is the client API for EmployeeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EmployeeServiceClient interface {
	Create(ctx context.Context, in *Employee_Project, opts ...grpc.CallOption) (*Employee_Project, error)
	Delete(ctx context.Context, in *Employee_Project, opts ...grpc.CallOption) (*types.Empty, error)
}

type employeeServiceClient struct {
	cc *grpc.ClientConn
}

func NewEmployeeServiceClient(cc *grpc.ClientConn) EmployeeServiceClient {
	return &employeeServiceClient{cc}
}

func (c *employeeServiceClient) Create(ctx context.Context, in *Employee_Project, opts ...grpc.CallOption) (*Employee_Project, error) {
	out := new(Employee_Project)
	err := c.cc.Invoke(ctx, "/employee_project.EmployeeService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) Delete(ctx context.Context, in *Employee_Project, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/employee_project.EmployeeService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmployeeServiceServer is the server API for EmployeeService service.
type EmployeeServiceServer interface {
	Create(context.Context, *Employee_Project) (*Employee_Project, error)
	Delete(context.Context, *Employee_Project) (*types.Empty, error)
}

// UnimplementedEmployeeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEmployeeServiceServer struct {
}

func (*UnimplementedEmployeeServiceServer) Create(ctx context.Context, req *Employee_Project) (*Employee_Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedEmployeeServiceServer) Delete(ctx context.Context, req *Employee_Project) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterEmployeeServiceServer(s *grpc.Server, srv EmployeeServiceServer) {
	s.RegisterService(&_EmployeeService_serviceDesc, srv)
}

func _EmployeeService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Employee_Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/employee_project.EmployeeService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).Create(ctx, req.(*Employee_Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Employee_Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/employee_project.EmployeeService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).Delete(ctx, req.(*Employee_Project))
	}
	return interceptor(ctx, in, info, handler)
}

var _EmployeeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "employee_project.EmployeeService",
	HandlerType: (*EmployeeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _EmployeeService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _EmployeeService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "employee_project/employee_project.proto",
}

func (m *Employee_Project) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Employee_Project) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Employee_Project) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintEmployeeProject(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintEmployeeProject(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.ProjectId) > 0 {
		i -= len(m.ProjectId)
		copy(dAtA[i:], m.ProjectId)
		i = encodeVarintEmployeeProject(dAtA, i, uint64(len(m.ProjectId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EmployeeId) > 0 {
		i -= len(m.EmployeeId)
		copy(dAtA[i:], m.EmployeeId)
		i = encodeVarintEmployeeProject(dAtA, i, uint64(len(m.EmployeeId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintEmployeeProject(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEmployeeProject(dAtA []byte, offset int, v uint64) int {
	offset -= sovEmployeeProject(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Employee_Project) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEmployeeProject(uint64(l))
	}
	l = len(m.EmployeeId)
	if l > 0 {
		n += 1 + l + sovEmployeeProject(uint64(l))
	}
	l = len(m.ProjectId)
	if l > 0 {
		n += 1 + l + sovEmployeeProject(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 2 + l + sovEmployeeProject(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 2 + l + sovEmployeeProject(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovEmployeeProject(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEmployeeProject(x uint64) (n int) {
	return sovEmployeeProject(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Employee_Project) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEmployeeProject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Employee_Project: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Employee_Project: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmployeeProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmployeeProject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmployeeProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmployeeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmployeeProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmployeeProject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmployeeProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmployeeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmployeeProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmployeeProject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmployeeProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmployeeProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmployeeProject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmployeeProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmployeeProject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmployeeProject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmployeeProject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEmployeeProject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEmployeeProject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEmployeeProject(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEmployeeProject
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEmployeeProject
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEmployeeProject
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEmployeeProject
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEmployeeProject
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEmployeeProject
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEmployeeProject        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEmployeeProject          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEmployeeProject = fmt.Errorf("proto: unexpected end of group")
)
