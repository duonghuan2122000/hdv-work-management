// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: service/customer.proto

package service

import (
	context "context"
	fmt "fmt"
	message "github.com/dinhtp/lets-go-pbtype/message"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("service/customer.proto", fileDescriptor_57747b22f154dc30) }
func init() { golang_proto.RegisterFile("service/customer.proto", fileDescriptor_57747b22f154dc30) }

var fileDescriptor_57747b22f154dc30 = []byte{
	// 431 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0xdf, 0x6a, 0xd4, 0x40,
	0x14, 0xc6, 0x99, 0x5a, 0x23, 0x0c, 0x82, 0x32, 0x68, 0xa5, 0xa9, 0x46, 0x5d, 0xaa, 0xc8, 0x62,
	0x66, 0x6a, 0xbd, 0x10, 0x7b, 0x57, 0xab, 0x48, 0x41, 0x50, 0x14, 0x11, 0xbc, 0x9b, 0x64, 0xcf,
	0xce, 0x8e, 0x24, 0x99, 0x31, 0x73, 0xa2, 0x94, 0xd2, 0x1b, 0x1f, 0x41, 0x6f, 0x7c, 0x05, 0xdf,
	0xc2, 0xcb, 0x5e, 0x0a, 0xbe, 0x80, 0xec, 0xfa, 0x20, 0xb2, 0xb3, 0xc9, 0x22, 0xfb, 0x1f, 0x7a,
	0x95, 0xcc, 0x39, 0x5f, 0xbe, 0x5f, 0xbe, 0xf0, 0x85, 0x6e, 0x38, 0x28, 0x3f, 0xe9, 0x14, 0x44,
	0x5a, 0x39, 0x34, 0x39, 0x94, 0xdc, 0x96, 0x06, 0x0d, 0xbb, 0x5c, 0xcf, 0x79, 0x33, 0x0f, 0x63,
	0xa5, 0xb1, 0x57, 0x25, 0x3c, 0x35, 0xb9, 0x50, 0x46, 0x19, 0xe1, 0x85, 0x49, 0xd5, 0xf5, 0x27,
	0x7f, 0xf0, 0x77, 0x23, 0x83, 0xf0, 0xba, 0x32, 0x46, 0x65, 0x20, 0xa4, 0xd5, 0x42, 0x16, 0x85,
	0x41, 0x89, 0xda, 0x14, 0xae, 0xde, 0xde, 0xf7, 0x97, 0x34, 0x56, 0x50, 0xc4, 0xee, 0xb3, 0x54,
	0x0a, 0x4a, 0x61, 0xac, 0x57, 0xcc, 0x50, 0x6f, 0xd5, 0x5e, 0x63, 0x22, 0xe4, 0x16, 0x8f, 0xea,
	0xe5, 0xa3, 0xff, 0xde, 0xab, 0xa3, 0x8b, 0x1e, 0x5a, 0x91, 0x01, 0xba, 0x58, 0x99, 0xd8, 0x26,
	0x78, 0x64, 0x41, 0xe4, 0xe0, 0x9c, 0x54, 0x93, 0x11, 0x77, 0x7f, 0xac, 0xd3, 0x4b, 0x07, 0xf5,
	0xe8, 0xcd, 0x28, 0x2d, 0x93, 0x34, 0x38, 0x28, 0x41, 0x22, 0xb0, 0x90, 0xd7, 0x8f, 0x8d, 0xbf,
	0x00, 0x6f, 0xc4, 0xe1, 0x82, 0x5d, 0xeb, 0xe6, 0x97, 0xdf, 0x7f, 0xbf, 0xad, 0x6d, 0xb6, 0xae,
	0x88, 0x63, 0x9b, 0x49, 0xec, 0x9a, 0x32, 0x3f, 0x19, 0x93, 0xf7, 0x48, 0x9b, 0x75, 0x69, 0xf0,
	0xd6, 0x76, 0xce, 0x82, 0xd8, 0xf6, 0x88, 0x28, 0xdc, 0x9c, 0x85, 0x10, 0xc7, 0xba, 0x73, 0x32,
	0xe4, 0x7c, 0xa0, 0xe7, 0x9e, 0x03, 0xb2, 0xed, 0x69, 0xa3, 0x97, 0x05, 0x34, 0x5e, 0xaf, 0xe1,
	0x63, 0x05, 0x0e, 0x17, 0xe2, 0x6e, 0x7b, 0xdc, 0x16, 0x9b, 0x8f, 0x63, 0x48, 0xd7, 0x5f, 0x68,
	0x87, 0xec, 0xce, 0xb4, 0xcd, 0x70, 0x3e, 0x49, 0xbb, 0xbb, 0x4c, 0xe6, 0xac, 0x29, 0x1c, 0xb4,
	0x6e, 0x78, 0xf2, 0x35, 0x76, 0x75, 0x16, 0xd9, 0x31, 0x4d, 0x83, 0xa7, 0x90, 0x01, 0xc2, 0x8a,
	0x21, 0x37, 0xf8, 0xa8, 0x47, 0xbc, 0xe9, 0x11, 0x7f, 0x36, 0xec, 0x51, 0x13, 0xb0, 0x3d, 0x3f,
	0xe0, 0x93, 0xef, 0xe4, 0xeb, 0xfe, 0x3b, 0x76, 0x61, 0xf7, 0xfc, 0x0e, 0xdf, 0xe1, 0x0f, 0xda,
	0x64, 0xad, 0x3c, 0xa4, 0x17, 0x1b, 0xff, 0x5b, 0xfb, 0xaf, 0x0e, 0xd9, 0xe3, 0x1e, 0xa2, 0x75,
	0x7b, 0x42, 0x2c, 0xad, 0xe3, 0xe4, 0x1f, 0x77, 0xda, 0x8f, 0xc8, 0xaf, 0x7e, 0x44, 0xfe, 0xf4,
	0x23, 0xf2, 0x73, 0x10, 0x91, 0xd3, 0x41, 0x44, 0xde, 0xdf, 0x5b, 0xd5, 0x26, 0x09, 0x7c, 0x9a,
	0x87, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xda, 0x63, 0xae, 0x8e, 0xca, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomerServiceClient is the client API for CustomerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomerServiceClient interface {
	Create(ctx context.Context, in *message.Customer, opts ...grpc.CallOption) (*message.Customer, error)
	Update(ctx context.Context, in *message.Customer, opts ...grpc.CallOption) (*message.Customer, error)
	Get(ctx context.Context, in *message.OneCustomerRequest, opts ...grpc.CallOption) (*message.Customer, error)
	List(ctx context.Context, in *message.ListCustomerRequest, opts ...grpc.CallOption) (*message.ListCustomerResponse, error)
	Delete(ctx context.Context, in *message.OneCustomerRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type customerServiceClient struct {
	cc *grpc.ClientConn
}

func NewCustomerServiceClient(cc *grpc.ClientConn) CustomerServiceClient {
	return &customerServiceClient{cc}
}

func (c *customerServiceClient) Create(ctx context.Context, in *message.Customer, opts ...grpc.CallOption) (*message.Customer, error) {
	out := new(message.Customer)
	err := c.cc.Invoke(ctx, "/service.customer.CustomerService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) Update(ctx context.Context, in *message.Customer, opts ...grpc.CallOption) (*message.Customer, error) {
	out := new(message.Customer)
	err := c.cc.Invoke(ctx, "/service.customer.CustomerService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) Get(ctx context.Context, in *message.OneCustomerRequest, opts ...grpc.CallOption) (*message.Customer, error) {
	out := new(message.Customer)
	err := c.cc.Invoke(ctx, "/service.customer.CustomerService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) List(ctx context.Context, in *message.ListCustomerRequest, opts ...grpc.CallOption) (*message.ListCustomerResponse, error) {
	out := new(message.ListCustomerResponse)
	err := c.cc.Invoke(ctx, "/service.customer.CustomerService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) Delete(ctx context.Context, in *message.OneCustomerRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/service.customer.CustomerService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerServiceServer is the server API for CustomerService service.
type CustomerServiceServer interface {
	Create(context.Context, *message.Customer) (*message.Customer, error)
	Update(context.Context, *message.Customer) (*message.Customer, error)
	Get(context.Context, *message.OneCustomerRequest) (*message.Customer, error)
	List(context.Context, *message.ListCustomerRequest) (*message.ListCustomerResponse, error)
	Delete(context.Context, *message.OneCustomerRequest) (*types.Empty, error)
}

// UnimplementedCustomerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCustomerServiceServer struct {
}

func (*UnimplementedCustomerServiceServer) Create(ctx context.Context, req *message.Customer) (*message.Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedCustomerServiceServer) Update(ctx context.Context, req *message.Customer) (*message.Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedCustomerServiceServer) Get(ctx context.Context, req *message.OneCustomerRequest) (*message.Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedCustomerServiceServer) List(ctx context.Context, req *message.ListCustomerRequest) (*message.ListCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedCustomerServiceServer) Delete(ctx context.Context, req *message.OneCustomerRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterCustomerServiceServer(s *grpc.Server, srv CustomerServiceServer) {
	s.RegisterService(&_CustomerService_serviceDesc, srv)
}

func _CustomerService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.Customer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.customer.CustomerService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).Create(ctx, req.(*message.Customer))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.Customer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.customer.CustomerService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).Update(ctx, req.(*message.Customer))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.OneCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.customer.CustomerService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).Get(ctx, req.(*message.OneCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.ListCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.customer.CustomerService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).List(ctx, req.(*message.ListCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(message.OneCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.customer.CustomerService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).Delete(ctx, req.(*message.OneCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.customer.CustomerService",
	HandlerType: (*CustomerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CustomerService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CustomerService_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _CustomerService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _CustomerService_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CustomerService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/customer.proto",
}
